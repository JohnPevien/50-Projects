---
import Layout from '@/layouts/Layout.astro';
---

<Layout title="Default Project">
    <div class="container">
        <div class="generator-wrapper">
            <h2>Password Generator</h2>
            <div class="result-container">
                <span class="result" id="result"></span>
                <button class="btn" id="clipboard">
                    <i class="far fa-clipboard"></i>
                </button>
            </div>
            <div class="settings">
                <div class="setting">
                    <label for="length">Length</label>
                    <input
                        type="number"
                        id="length"
                        min="4"
                        max="20"
                        value="12"
                    />
                </div>
                <div class="setting">
                    <label for="uppercase">Include uppercase</label>
                    <input type="checkbox" id="uppercase" />
                </div>
                <div class="setting">
                    <label for="lowercase">Include lowercase</label>
                    <input type="checkbox" id="lowercase" />
                </div>
                <div class="setting">
                    <label for="numbers">Include numbers</label>
                    <input type="checkbox" id="numbers" />
                </div>
                <div class="setting">
                    <label for="symbols">Include symbols</label>
                    <input type="checkbox" id="symbols" />
                </div>
            </div>

            <button class="btn btn-large" id="generate"
                >Generate Password</button
            >
        </div>
    </div>
</Layout>

<style>
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
    .generator-wrapper {
        padding: 20px 40px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    h2 {
        margin: 10px 0 20px;
        text-align: center;
    }

    .setting {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 10px 0;
    }

    .btn {
        border: none;
        background-color: #3b3b98;
        color: #fff;
        padding: 8px 16px;
        cursor: pointer;
    }

    .btn-large {
        display: block;
        width: 100%;
    }
    .result-container {
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: flex-start;
        align-items: center;
        position: relative;
        font-size: 18px;
        height: 50px;
        width: 100%;
    }

    .result-container .btn {
        position: absolute;
        top: 5px;
        right: 5px;
        height: 40px;
        font-size: 14px;
    }

    .result-container #result {
        word-wrap: break-word;
        max-width: calc(100% - 50px);
        position: absolute;
        left: 10px;
        color: #fff;
    }

    #result::-webkit-scrollbar {
        width: 1rem;
    }
</style>

<style is:inline></style>

<script is:inline>
    const resultEl = document.getElementById('result');
    const lengthEl = document.getElementById('length');
    const uppercaseEl = document.getElementById('uppercase');
    const lowercaseEl = document.getElementById('lowercase');
    const numbersEl = document.getElementById('numbers');
    const symbolsEl = document.getElementById('symbols');
    const generateEl = document.getElementById('generate');
    const clipboardEl = document.getElementById('clipboard');

    const randomFunc = {
        lower: getRandomLower,
        upper: getRandomUpper,
        number: getRandomNumber,
        symbol: getRandomSymbol,
    };

    clipboardEl.addEventListener('click', () => {
        const password = resultEl.innerText;
        if (!password) {
            return;
        }
        navigator.clipboard.writeText(password);
        alert('Password copied to clipboard!');
    });

    generateEl.addEventListener('click', () => {
        const length = +lengthEl.value;
        const hasLower = lowercaseEl.checked;
        const hasUpper = uppercaseEl.checked;
        const hasNumber = numbersEl.checked;
        const hasSymbol = symbolsEl.checked;

        resultEl.innerText = generatePassword(
            hasLower,
            hasUpper,
            hasNumber,
            hasSymbol,
            length
        );
    });

    function generatePassword(lower, upper, number, symbol, length) {
        let generatedPassword = '';
        const typesCount = lower + upper + number + symbol;
        const typesArr = [{ lower }, { upper }, { number }, { symbol }].filter(
            (item) => Object.values(item)[0]
        );

        if (typesCount === 0) {
            return '';
        }

        for (let i = 0; i < length; i += typesCount) {
            typesArr.forEach((type) => {
                const funcName = Object.keys(type)[0];
                generatedPassword += randomFunc[funcName]();
            });
        }

        const finalPassword = generatedPassword.slice(0, length);

        return finalPassword;
    }

    function getRandomLower() {
        return String.fromCharCode(Math.floor(Math.random() * 26) + 97);
    }

    function getRandomUpper() {
        return String.fromCharCode(Math.floor(Math.random() * 26) + 65);
    }

    function getRandomNumber() {
        return String.fromCharCode(Math.floor(Math.random() * 10) + 48);
    }

    function getRandomSymbol() {
        const symbols = '!@#$%^&*(){}[]=<>/,.';
        return symbols[Math.floor(Math.random() * symbols.length)];
    }
</script>
