---
import Layout from '@/layouts/Layout.astro';
import ProjectWrapper from '@/components/ProjectWrapper.astro';
---

<Layout title="Blurry Loading">
    <ProjectWrapper>
        <section class="bg"></section>
        <div class="loading-text">0%</div>
    </ProjectWrapper>
</Layout>

<style is:inline>
    .bg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('https://images.unsplash.com/photo-1576161787924-01bb08dad4a4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2104&q=80')
            no-repeat center center/cover;
        filter: blur(0px);
        z-index: 0;
    }

    .loading-text {
        font-size: 50px;
        color: #fff;
        position: relative;
        z-index: 1;
    }
</style>

<script is:inline>
    const bg = document.querySelector('.bg')
    const loadingText = document.querySelector('.loading-text')

    let load = 0

    /**
     * https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers
     */

    const scale = (number, inMin, inMax, outMin, outMax) => {
        return ((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin
    }

    const blurring = () => {
        load++
        if (load > 99) {
            clearInterval(interval) /*remove interval once 100 is reached */
        }

        loadingText.innerText = `${load}%`
        loadingText.style.opacity = `${scale(load, 0, 100, 1, 0)}`
        bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`
    }

    let interval = setInterval(
        blurring,
        30
    ) /*create an interval that runs the function every 30ms */
</script>
